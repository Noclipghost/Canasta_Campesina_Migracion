{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bedoya\\\\Desktop\\\\Programming learning\\\\Canasta Campesina\\\\frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/context/AuthContext.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n/**\r\n * Proveedor de contexto para la autenticación de usuarios\r\n * Maneja el estado de login, logout y roles de usuario\r\n */\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Verificar si hay un usuario logueado al cargar la aplicación\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  /**\r\n   * Función para iniciar sesión\r\n   * @param {Object} userData - Datos del usuario (email, password)\r\n   * @returns {Promise} - Promesa con el resultado del login\r\n   */\n  const login = async userData => {\n    try {\n      // Aquí se conectará con el backend\n      // Por ahora simulamos el login\n      const mockUser = {\n        id: 1,\n        name: 'Usuario Demo',\n        email: userData.email,\n        role: userData.email === 'admin@canasta.com' ? 'admin' : 'user'\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n      return {\n        success: true,\n        user: mockUser\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  /**\r\n   * Función para cerrar sesión\r\n   */\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  /**\r\n   * Verificar si el usuario es administrador\r\n   * @returns {boolean} - True si es admin, false si no\r\n   */\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n\n  /**\r\n   * Verificar si el usuario está autenticado\r\n   * @returns {boolean} - True si está logueado, false si no\r\n   */\n  const isAuthenticated = () => {\n    return user !== null;\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    isAdmin,\n    isAuthenticated,\n    isLoading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Hook personalizado para usar el contexto de autenticación\r\n */\n_s(AuthProvider, \"YajQB7LURzRD+QP5gw0+K2TZIWA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","storedUser","localStorage","getItem","JSON","parse","login","userData","mockUser","id","name","email","role","setItem","stringify","success","error","message","logout","removeItem","isAdmin","isAuthenticated","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Bedoya/Desktop/Programming learning/Canasta Campesina/frontend/src/context/AuthContext.jsx"],"sourcesContent":["// frontend/src/context/AuthContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\n/**\r\n * Proveedor de contexto para la autenticación de usuarios\r\n * Maneja el estado de login, logout y roles de usuario\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Verificar si hay un usuario logueado al cargar la aplicación\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  /**\r\n   * Función para iniciar sesión\r\n   * @param {Object} userData - Datos del usuario (email, password)\r\n   * @returns {Promise} - Promesa con el resultado del login\r\n   */\r\n  const login = async (userData) => {\r\n    try {\r\n      // Aquí se conectará con el backend\r\n      // Por ahora simulamos el login\r\n      const mockUser = {\r\n        id: 1,\r\n        name: 'Usuario Demo',\r\n        email: userData.email,\r\n        role: userData.email === 'admin@canasta.com' ? 'admin' : 'user'\r\n      };\r\n      \r\n      setUser(mockUser);\r\n      localStorage.setItem('user', JSON.stringify(mockUser));\r\n      return { success: true, user: mockUser };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Función para cerrar sesión\r\n   */\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  /**\r\n   * Verificar si el usuario es administrador\r\n   * @returns {boolean} - True si es admin, false si no\r\n   */\r\n  const isAdmin = () => {\r\n    return user && user.role === 'admin';\r\n  };\r\n\r\n  /**\r\n   * Verificar si el usuario está autenticado\r\n   * @returns {boolean} - True si está logueado, false si no\r\n   */\r\n  const isAuthenticated = () => {\r\n    return user !== null;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    isAdmin,\r\n    isAuthenticated,\r\n    isLoading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Hook personalizado para usar el contexto de autenticación\r\n */\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth debe ser usado dentro de un AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
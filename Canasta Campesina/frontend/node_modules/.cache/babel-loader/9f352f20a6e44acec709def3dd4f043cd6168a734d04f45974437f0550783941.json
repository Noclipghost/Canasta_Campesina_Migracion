{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bedoya\\\\Desktop\\\\Programming learning\\\\Canasta Campesina\\\\frontend\\\\src\\\\context\\\\CartContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/context/CartContext.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n/**\r\n * Proveedor de contexto para el carrito de compras\r\n * Maneja los productos agregados, cantidades y total\r\n */\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Cargar carrito desde localStorage al iniciar\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setCartItems(JSON.parse(savedCart));\n    }\n  }, []);\n\n  // Guardar carrito en localStorage cuando cambie\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n\n  /**\r\n   * Agregar producto al carrito\r\n   * @param {Object} product - Producto a agregar\r\n   * @param {number} quantity - Cantidad a agregar\r\n   */\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      const existingItem = prevItems.find(item => item._id === product._id);\n      if (existingItem) {\n        // Si el producto ya existe, actualizar cantidad\n        return prevItems.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      } else {\n        // Si es nuevo, agregarlo al carrito\n        return [...prevItems, {\n          ...product,\n          quantity\n        }];\n      }\n    });\n  };\n\n  /**\r\n   * Remover producto del carrito\r\n   * @param {number} productId - ID del producto a remover\r\n   */\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n\n  /**\r\n   * Actualizar cantidad de un producto\r\n   * @param {number} productId - ID del producto\r\n   * @param {number} newQuantity - Nueva cantidad\r\n   */\n  const updateQuantity = (productId, newQuantity) => {\n    if (newQuantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: newQuantity\n    } : item));\n  };\n\n  /**\r\n   * Limpiar todo el carrito\r\n   */\n  const clearCart = () => {\n    setCartItems([]);\n  };\n\n  /**\r\n   * Calcular el total del carrito\r\n   * @returns {number} - Total en pesos\r\n   */\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => {\n      return total + item.price * item.quantity;\n    }, 0);\n  };\n\n  /**\r\n   * Obtener cantidad total de productos\r\n   * @returns {number} - Cantidad total de items\r\n   */\n  const getCartItemsCount = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  /**\r\n   * Abrir/cerrar carrito\r\n   */\n  const toggleCart = () => {\n    setIsOpen(!isOpen);\n  };\n  const value = {\n    cartItems,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    getCartTotal,\n    getCartItemsCount,\n    isOpen,\n    toggleCart,\n    setIsOpen\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n\n/**\r\n * Hook personalizado para usar el contexto del carrito\r\n */\n_s(CartProvider, \"jz1BkMmrZoIxsaXpNnxAwH7Quo8=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart debe ser usado dentro de un CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","isOpen","setIsOpen","savedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","quantity","prevItems","existingItem","find","item","_id","map","id","removeFromCart","productId","filter","updateQuantity","newQuantity","clearCart","getCartTotal","reduce","total","price","getCartItemsCount","toggleCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Bedoya/Desktop/Programming learning/Canasta Campesina/frontend/src/context/CartContext.jsx"],"sourcesContent":["// frontend/src/context/CartContext.jsx\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst CartContext = createContext();\r\n\r\n/**\r\n * Proveedor de contexto para el carrito de compras\r\n * Maneja los productos agregados, cantidades y total\r\n */\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  // Cargar carrito desde localStorage al iniciar\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      setCartItems(JSON.parse(savedCart));\r\n    }\r\n  }, []);\r\n\r\n  // Guardar carrito en localStorage cuando cambie\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cartItems));\r\n  }, [cartItems]);\r\n\r\n  /**\r\n   * Agregar producto al carrito\r\n   * @param {Object} product - Producto a agregar\r\n   * @param {number} quantity - Cantidad a agregar\r\n   */\r\n  const addToCart = (product, quantity = 1) => {\r\n    setCartItems(prevItems => {\r\n      const existingItem = prevItems.find(item => item._id === product._id);\r\n      \r\n      if (existingItem) {\r\n        // Si el producto ya existe, actualizar cantidad\r\n        return prevItems.map(item =>\r\n          item.id === product.id\r\n            ? { ...item, quantity: item.quantity + quantity }\r\n            : item\r\n        );\r\n      } else {\r\n        // Si es nuevo, agregarlo al carrito\r\n        return [...prevItems, { ...product, quantity }];\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Remover producto del carrito\r\n   * @param {number} productId - ID del producto a remover\r\n   */\r\n  const removeFromCart = (productId) => {\r\n    setCartItems(prevItems => \r\n      prevItems.filter(item => item.id !== productId)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Actualizar cantidad de un producto\r\n   * @param {number} productId - ID del producto\r\n   * @param {number} newQuantity - Nueva cantidad\r\n   */\r\n  const updateQuantity = (productId, newQuantity) => {\r\n    if (newQuantity <= 0) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n\r\n    setCartItems(prevItems =>\r\n      prevItems.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity: newQuantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Limpiar todo el carrito\r\n   */\r\n  const clearCart = () => {\r\n    setCartItems([]);\r\n  };\r\n\r\n  /**\r\n   * Calcular el total del carrito\r\n   * @returns {number} - Total en pesos\r\n   */\r\n  const getCartTotal = () => {\r\n    return cartItems.reduce((total, item) => {\r\n      return total + (item.price * item.quantity);\r\n    }, 0);\r\n  };\r\n\r\n  /**\r\n   * Obtener cantidad total de productos\r\n   * @returns {number} - Cantidad total de items\r\n   */\r\n  const getCartItemsCount = () => {\r\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\r\n  };\r\n\r\n  /**\r\n   * Abrir/cerrar carrito\r\n   */\r\n  const toggleCart = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const value = {\r\n    cartItems,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getCartTotal,\r\n    getCartItemsCount,\r\n    isOpen,\r\n    toggleCart,\r\n    setIsOpen\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Hook personalizado para usar el contexto del carrito\r\n */\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart debe ser usado dentro de un CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}